<?xml version="1.0" encoding="utf-8"?>

<aiscript name="jp.lib.MoveThroughGate" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">

   <order id="JP_lib_MoveThroughGate" name="Move through Gate" category="internal" infinite="false" allowinloop="false" canplayercancel="true">
      <params>
         <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
         <param name="GATE" type="internal" default="null"/>
         <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
         <param name="debugchance" type="internal" default="0"/>
         <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
      </params>
      <location object="$LOCATION.{1}" position="$LOCATION.{2}" condition="@$LOCATION.{1} != null and @$LOCATION.{2} != null"/>
      <location object="$LOCATION.{1}" condition="@$LOCATION.{1} != null"/>
   </order>

   <interrupts>
      <library>
         <actions name="CalculateRandomGateApproachOffsets">
            <set_value name="$_RandomOffsetX" min="-1000m" max="1000m" profile="bell"/>
            <set_value name="$_RandomOffsetY" min="-1000m" max="1000m" profile="bell"/>
            <set_value name="$_RandomOffsetZ" min="3000m"  max="6000m" profile="bell"/>
         </actions>
      </library>
      <handler ref="AttackHandler"/>
      <handler ref="MissileLockHandler" />
      <handler ref="ScannedHandler"/>
      <handler ref="InspectedHandler"/>
      <handler ref="FoundAbandonedHandler"/>
      <handler ref="FoundLockboxHandler"/>
      <handler ref="ResupplyHandler"/>
      <handler ref="TideHandler"/>
   </interrupts>

   <init>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
      <set_value name="$_Ship" exact="this.ship"/>
      <set_value name="$_DefaultOrderParamRef" exact="if $_Ship.defaultorder.id == 'Assist' then $_Ship.commander.defaultorder else $_Ship.defaultorder"/>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
      <set_value name="$_IsCapShip" exact="$_Ship.isclass.{[class.ship_l, class.ship_xl]}"/>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
      <set_value name="$DEBUG" exact="@$_DefaultOrderParamRef.$DEBUG"/>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
      <do_if value="$DEBUG gt 0">
         <set_value name="$_DebugFolderName" exact="@$_DefaultOrderParamRef.$DEBUG_FOLDER_NAME"/>
         <set_value name="$_DebugScriptName" exact="'jp.lib.MoveThroughGate'"/>
         <set_value name="$_DebugFileName" exact="$_Ship.idcode + '.' + $_DebugScriptName + '.xml.log'"/>
      </do_if>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
   </init>

   <attention min="unknown">
      <actions>

         <label name="INIT_LBL"/>
         <do_if value="$DEBUG gt 0">
            <debug_to_file directory="$_DebugFolderName" name="$_DebugFileName" text="'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'" append="false"/>
            <debug_to_file directory="$_DebugFolderName" name="$_DebugFileName" text="'[' + player.systemtime.{'%F - %X'} + '] ' + '~~ ' + $_DebugScriptName + '.xml ~ SCRIPT_START ~~' + '\n'"/>
         </do_if>

         <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

         <!-- TODO: Adjust the transition into other sectors for L/XL ships (Warp Drive)? -->

         <set_command command="command.move" param="$GATE"/>
         <set_command_action commandaction="commandaction.calculating"/>

         <!-- Determine the entry and exit gates based on the gate type. -->
         <do_if value="$GATE.isclass.gate or $GATE.isclass.highwayentrygate">
            <set_value name="$_EntryGate" exact="$GATE"/>
            <set_value name="$_ExitGate"  exact="$GATE.exit"/>
         </do_if>
         <do_elseif value="$GATE.isclass.highway">
            <set_value name="$_EntryGate" exact="$GATE.entry"/>
            <set_value name="$_ExitGate" exact="$GATE.entry.exit"/>
         </do_elseif>

         <!-- Assign the sectors and types based on the gate -->
         <set_value name="$_EntryGateSector" exact="$_EntryGate.sector"/>
         <set_value name="$_ExitGateSector"  exact="$_ExitGate.sector"/>
         <set_value name="$_IsGate"          exact="@$_EntryGate.isclass.gate and not @$_EntryGate.isaccelerator"/>
         <set_value name="$_IsAccelerator"   exact="@$_EntryGate.isclass.gate and @$_EntryGate.isaccelerator"/>
         <set_value name="$_IsSuperhighway"  exact="@$_EntryGate.isclass.highwayentrygate"/>

         <!-- Include code that calculates random offsets for the final approach position to the gate -->
         <set_value name="$_Gate" exact="$_EntryGate"/>
         <include_interrupt_actions ref="CalculateRandomGateApproachOffsets"/>

         <!-- Determine ship movement based on the type of gate and the size of the ship -->
         <do_if value="@$_IsGate and @$_IsCapShip">
            <!-- Specific behavior for capital ships and gates -->
            <set_value name="$_Radius" exact="4km"/>
            <create_list name="$_CapShipApproachPositions"/>

            <create_position name="$_EvalPosLeft" space="$_EntryGateSector" object="$_EntryGate" x="-$_Radius"/>
            <create_position name="$_EvalPosRight" space="$_EntryGateSector" object="$_EntryGate" x="$_Radius"/>

            <do_if value="$_Ship.distanceto.[$_EntryGateSector, $_EvalPosLeft] lt $_Ship.distanceto.[$_EntryGateSector, $_EvalPosRight]">
               <set_value name="$_Radius" exact="-$_Radius"/>
               <set_value name="$_AngleSteps" exact="[0, 45, 90, 135, 180]"/>
            </do_if>
            <do_else>
               <set_value name="$_Radius" exact="$_Radius"/>
               <set_value name="$_AngleSteps" exact="[0, -45, -90, -135, -180]"/>
            </do_else>

            <do_for_each name="$_Angle" in="$_AngleSteps">
               <set_value name="$_AngleRadian" exact="$_Angle * pi / 180"/>
               <create_position name="$_CirclePos" space="$_EntryGateSector" object="$_EntryGate"
                                x="$_Radius * cos($_AngleRadian) + $_Radius"
                                y="0"
                                z="$_Radius * sin($_AngleRadian) + -$_RandomOffsetZ"/>

               <append_to_list name="$_CapShipApproachPositions" exact="$_CirclePos"/>
            </do_for_each>
         </do_if>
         <do_elseif value="@$_IsSuperhighway">
            <!-- Specific behavior for superhighways -->
            <get_safe_pos result="$_EntryGateApproachPosition" sector="$_EntryGateSector" object="$_EntryGate" radius="$_Ship.size" ignored="$_Ship" x="$_RandomOffsetX" y="$_RandomOffsetY" z="-$_RandomOffsetZ"/>
         </do_elseif>
         <do_else>
            <!-- Default behavior ~ includes jump gates and accelerators -->
            <get_safe_pos result="$_EntryGateApproachPosition" sector="$_EntryGateSector" object="$_EntryGate" radius="$_Ship.size" ignored="$_Ship" x="$_RandomOffsetX" y="$_RandomOffsetY" z="$_RandomOffsetZ"/>
         </do_else>

         <!-- For capital ships, use the list of approach positions -->
         <!-- For all other ships, use the calculated approach position. -->
         <do_if value="@$_IsCapShip">
            <set_value name="$LOCATION" exact="[$_EntryGateSector, $_CapShipApproachPositions.{1}]"/>
            <run_script name="'jp.lib.MoveToPosition'">
               <param name="SECTOR" value="$_EntryGateSector"/>
               <param name="POSITIONS" value="$_CapShipApproachPositions"/>
               <param name="FORCE_POSITION" value="true"/>
               <param name="FINISH_ON_APPROACH" value="true"/>
            </run_script>
         </do_if>
         <do_else>
            <set_value name="$LOCATION" exact="[$_EntryGateSector, $_EntryGateApproachPosition]"/>
            <run_script name="'jp.lib.MoveToPosition'">
               <param name="SECTOR" value="$_EntryGateSector"/>
               <param name="POSITION" value="$_EntryGateApproachPosition"/>
               <param name="FORCE_POSITION" value="true"/>
               <param name="FINISH_ON_APPROACH" value="true"/>
            </run_script>
         </do_else>

         <set_value name="$LOCATION" exact="[$_ExitGate, null]"/>
         <!-- Execute the transition through the gate based on the ship size. -->
         <do_if value="@$_IsGate or @$_IsAccelerator">
            <do_if value="@$_IsCapShip">
               <move_gate object="$_Ship" gate="$_EntryGate">
                  <interrupt>
                     <conditions>
                        <event_object_changed_sector object="$_Ship"/>
                     </conditions>
                  </interrupt>
               </move_gate>
            </do_if>
            <do_else>
               <move_to object="$_Ship" destination="$_ExitGate">
                  <interrupt>
                     <conditions>
                        <event_object_changed_sector object="$_Ship"/>
                     </conditions>
                  </interrupt>
               </move_to>
            </do_else>
            <stop_moving object="$_Ship" immediate="true"/>
            <warp object="$_Ship" sector="$_ExitGateSector">
               <position space="$_ExitGateSector" object="$_ExitGate" value="position.[$_RandomOffsetX, $_RandomOffsetY, 1km + $_Ship.length / 2]"/>
               <rotation pitch="$_ExitGate.rotation.pitch" yaw="$_ExitGate.rotation.yaw" roll="$_ExitGate.rotation.roll"/>
            </warp>
         </do_if>

         <!-- Transition through the Superhighway. -->
         <do_if value="@$_IsSuperhighway">
            <move_to object="$_Ship" destination="$_ExitGate">
               <interrupt>
                  <conditions>
                     <event_object_changed_zone object="$_Ship"/>
                     <check_value value="event.param.isclass.highway"/>
                  </conditions>
               </interrupt>
            </move_to>
            <wait exact="60s">
               <interrupt>
                  <conditions>
                     <event_object_changed_sector object="$_Ship"/>
                  </conditions>
               </interrupt>
            </wait>
         </do_if>

         <!-- Include code that calculates random offsets for the final position for clearing the gate -->
         <set_value name="$_Gate" exact="$_ExitGate"/>
         <include_interrupt_actions ref="CalculateRandomGateApproachOffsets"/>

         <!-- After the transition, move the ship away from the exit gate to a safe position. -->
         <remove_value name="$_MaxOffset"/>
         <get_safe_pos result="$_ExitGateApproachPosition" sector="$_ExitGateSector" object="$_ExitGate" radius="$_Ship.size" ignored="$_Ship"  x="$_RandomOffsetX" y="$_RandomOffsetY" z="$_RandomOffsetZ"/>
         <set_value name="$LOCATION" exact="[$_ExitGateSector, $_ExitGateApproachPosition]"/>
         <run_script name="'jp.lib.MoveToPosition'">
            <param name="SECTOR" value="$_ExitGateSector"/>
            <param name="POSITION" value="$_ExitGateApproachPosition"/>
            <param name="FORCE_POSITION" value="true"/>
            <param name="FINISH_ON_APPROACH" value="true"/>
         </run_script>

         <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

         <label name="END_LBL"/>
         <do_if value="$DEBUG gt 0">
            <debug_to_file directory="$_DebugFolderName" name="$_DebugFileName" text="'[' + player.systemtime.{'%F - %X'} + '] ' + '~~ ' + $_DebugScriptName + '.xml ~ SCRIPT_END ~~'"/>
            <debug_to_file directory="$_DebugFolderName" name="$_DebugFileName" text="'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'"/>
         </do_if>

      </actions>
   </attention>

   <on_abort>
   </on_abort>

</aiscript>